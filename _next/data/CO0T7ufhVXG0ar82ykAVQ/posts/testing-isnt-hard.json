{"pageProps":{"siteTitle":"~/garrit","frontmatter":{"title":"Testing isn't hard","date":"2019-11-08"},"markdownBody":"\n\"I write two tests before implementing a method\", \"My project has 90% coverage\".\n\nI don't know about you, but that's something I don't hear very often. But why is that?\n\nTesting is not even that difficult to do, but yet it is always coming short in my projects. About a year ago, I've tried to implement tests in my React applications with little success, mostly because integrating `enzyme` and configuring it correctly is not that intuitive as a relatively new developer. I want to share my (partly opinionated) approach to JavaScript testing with `jest`, to get you started. In a later post I will demonstrate a way to implement `enzyme` into your React projects.\n\n# The basics of testing JavaScript functions\n\nTo get started, you need a npm-project. I don't think I have to explain that, but just in case:\n\n```bash\nmkdir awesome-testing-project\ncd awesome-testing-project\nnpm init -y\n```\n\nOf course, we need a unit we want to test. What about a method that returns the first element of an array?\n\n```js\nmodule.exports = function firstElement(arr) {\n  return arr[1];\n};\n```\n\nYou already spotted a bug, huh? Let's keep it simple for now.\n\nInstall and initialize Jest, an open-source testing framework maintained by Facebook. When initializing, you should check every question with `y`.\n\n```bash\nnpm i --save-dev jest\nnpx jest --init\n```\n\nNext up, we need to define our first test. Conventionally, we create a folder named `__tests__` in the directory of the module we want to test. inside it, there should be a file named `<module>.test.js`. Something like this:\n\n```bash\n▶ tree\n.\n├── package.json\n└── src\n    ├── __tests__\n    │   └── firstElement.test.js\n    └── firstElement.js\n```\n\nJest provides global functions that do not need to be imported in a file. A simple test can look like this:\n\n```js\nconst firstElement = require(\"../firstElement.js\");\n\ntest(\"firstElement gets first element of array\", () => {\n  expect(firstElement([1, 2])).toBe(1);\n});\n```\n\n`expect` is another word for `assert`. If you ask me, \"Expect firstElement of [1, 2] to be 1\" sounds reasonably english, doesn't it? After defining the test, all there is to do left is to run the `npm test` command, which has been created for us by running `npx jest --init` earlier.\n\n```bash\n▶ npm test\n> jest\n\n FAIL  src/__tests__/firstElement.test.js\n  ✕ firstElement (6ms)\n\n  ● firstElement\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 1\n    Received: 2\n\n      2 |\n      3 | test('firstElement', () => {\n    > 4 |   expect(firstElement([1, 2])).toBe(1);\n        |                                ^\n      5 | });\n      6 |\n\n      at Object.<anonymous>.test (src/__tests__/firstElement.test.js:4:32)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 total\nSnapshots:   0 total\nTime:        1.1s\nRan all test suites.\nnpm ERR! Test failed.  See above for more details.\n```\n\nWhoops! Looks like we have found a bug! Let's fix it by adjusting the index of the return value in the firstElement function:\n\n```js\nmodule.exports = function firstElement(arr) {\n  return arr[0];\n};\n```\n\nAnd after rerunning `npm test`:\n\n```bash\n▶ npm test\n> jest\n\n PASS  src/__tests__/firstElement.test.js\n  ✓ firstElement (4ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.666s, estimated 2s\nRan all test suites.\n```\n\nYay, your first unit test! Of course, there is much more to find out about the Jest framework. To see a full guide, read the [official docs](https://jestjs.io/).\n\nI have prepared a [template repository](https://github.com/garritfra/react-parcel-boilerplate) for building react apps. It also uses Jest to run tests, you don't have to worry about a thing! If you found this interesting, consider checking out my other blog posts, and/or check out my [GitHub](https://github.com/garritfra)!\n"},"__N_SSG":true}